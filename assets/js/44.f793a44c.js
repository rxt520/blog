(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{365:function(s,a,e){"use strict";e.r(a);var t=e(3),r=Object(t.a)({},(function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"redis"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#redis"}},[s._v("#")]),s._v(" Redis")]),s._v(" "),e("h2",{attrs:{id:"redis-安装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#redis-安装"}},[s._v("#")]),s._v(" Redis 安装")]),s._v(" "),e("h3",{attrs:{id:"linux"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#linux"}},[s._v("#")]),s._v(" Linux")]),s._v(" "),e("p",[s._v("首先确保安装gcc 编译 可以用gcc -v检测")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("apt install build-essential\nyum -y install gcc automake autoconf libtool make\n\n\n注意 运行yum时出现/var/run/yum.pid已被锁定。pid为xxx的另一个程序正在运行的问题解决。\nrm -f var/run/yum.pid\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("p",[s._v("访问https://redis.io/download 到官网进行下载。这里下载最新的redis版本.")]),s._v(" "),e("ol",[e("li",[s._v("wget http://download.redis.io/releases/redis-4.0.14.tar.gz")]),s._v(" "),e("li",[s._v("tar zxvf redis-4.0.14.tar.gz")]),s._v(" "),e("li",[s._v("cd redis-4.0.14")]),s._v(" "),e("li",[s._v("make MALLOC=libc")]),s._v(" "),e("li",[s._v("make PREFIX=/usr/local/redis install")]),s._v(" "),e("li",[s._v("cd bin")])]),s._v(" "),e("h3",{attrs:{id:"docker"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker"}},[s._v("#")]),s._v(" Docker")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("docker pull redis`\n`docker run -d --name redis -p 6379:6379 redis`\n`docker exec -it redis redis-cli\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("h3",{attrs:{id:"配置详解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置详解"}},[s._v("#")]),s._v(" 配置详解")]),s._v(" "),e("p",[s._v("Redis配置文件为redis.conf(Windows 名为 redis.windows.conf)")]),s._v(" "),e("p",[s._v("redis安装文件夹下的redis.conf 复制到与bin文件夹同级目录下")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("·daemonize ： 默认为no，修改为yes启用守护进程，即开启后后台运行\n·protected mode:默认为yes 修改为no 为关闭守护模式 即非本机可以访问\n·port ：设定端口号，默认为6379\n\n·bind ：绑定IP地址 若绑定为127.0.0.1 则只能本机访问\n\n·databases ：数据库数量，默认16\n\n·save <second> <changes> ：指定多少时间、有多少次更新操作，就将数据同步到数据文件\n#redis默认配置有三个条件，满足一个即进行持久化\nsave 900 1 #900s有1个更改\nsave 300 10 #300s有10个更改\nsave 60 10000 #60s有10000更改\n\n·dbfilename ：指定本地数据库的文件名，默认为dump.rdb\n\n·dir ：指定本地数据库的存放目录，默认为./当前文件夹\n\n·requirepass ：设置密码，默认关闭\nredis -cli -h host -p port -a password\n\n·dbfilename：指定本地数据库文件名\n默认值为dump.rdb   dbfilename dump.rdb\n\nRedis中的内存维护策略\n在redis中有两种解决方案，\n一是为数据设置超时时间，\n\n二是采用LRU算法动态将不用的数据删除。内存管理的一种页面置换算法，对于在内存中但又不用的数据块（内存块）叫做LRU，操作系统会根据哪些数据属于LRU而将其移出内存而腾出空间来加载另外的数据。\n\n1.volatile-lru：设定超时时间的数据中,删除最不常使用的数据.\n\n2.allkeys-lru：查询所有的key中最近最不常使用的数据进行删除，这是应用最广泛的策略.\n\n3.volatile-random：在已经设定了超时的数据中随机删除.\n\n4.allkeys-random：查询所有的key,之后随机删除.\n\n5.volatile-ttl：查询全部设定超时时间的数据,之后排序,将马上将要过期的数据进行删除操作.\n\n6.noeviction：如果设置为该属性,则不会进行删除操作,如果内存溢出则报错返回.\n（默认）\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br")])]),e("h3",{attrs:{id:"自定义配置启动"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自定义配置启动"}},[s._v("#")]),s._v(" 自定义配置启动")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("服务端\n./bin/redis-server ./redis.conf\n\n客户端\nredis-cli -h ip -p 端口 -a 密码\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("h3",{attrs:{id:"关闭"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#关闭"}},[s._v("#")]),s._v(" 关闭")]),s._v(" "),e("p",[s._v("第一种关闭方式：（断电、非正常关闭。容易数据丢失）")]),s._v(" "),e("p",[s._v("查询PID  ps -ef | grep -i redis")]),s._v(" "),e("p",[s._v("kill -9 PID")]),s._v(" "),e("p",[s._v("第二种关闭方式（正常关闭、数据保存）")]),s._v(" "),e("p",[s._v("./bin/redis-cli shutdown")]),s._v(" "),e("h2",{attrs:{id:"redis常用命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#redis常用命令"}},[s._v("#")]),s._v(" Redis常用命令")]),s._v(" "),e("ul",[e("li",[s._v("DEL key: 删除key")]),s._v(" "),e("li",[s._v("DUMP key：序列化给定key，返回被序列化的值")]),s._v(" "),e("li",[s._v("EXISTS key：检查key是否存在")]),s._v(" "),e("li",[s._v("EXPIRE key second：为key设定过期时间")]),s._v(" "),e("li",[s._v("TTL key：返回key剩余时间")]),s._v(" "),e("li",[s._v("PERSIST key：移除key的过期时间，key将持久保存")]),s._v(" "),e("li",[s._v("KEY pattern：查询所有符号给定模式的key")]),s._v(" "),e("li",[s._v("RANDOMKEY：随机返回一个key")]),s._v(" "),e("li",[s._v("RENAME key newkey：修改key的名称")]),s._v(" "),e("li",[s._v("MOVE key db：移动key至指定数据库中")]),s._v(" "),e("li",[s._v("TYPE key：返回key所储存的值的类型")])]),s._v(" "),e("h2",{attrs:{id:"redis数据类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#redis数据类型"}},[s._v("#")]),s._v(" Redis数据类型")]),s._v(" "),e("h4",{attrs:{id:"string"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[s._v("#")]),s._v(" String")]),s._v(" "),e("p",[s._v("String类型是二进制安全的，redis的string可以包含任何数据，如图像、序列化对象。一个键最多能存储512MB。二进制安全是指，在传输数据的时候，能保证二进制数据的信息安全，也就是不会被篡改、破译；如果被攻击，能够及时检测出来")]),s._v(" "),e("h5",{attrs:{id:"常用命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常用命令"}},[s._v("#")]),s._v(" 常用命令")]),s._v(" "),e("ul",[e("li",[s._v("setkey_name value：命令不区分大小写，但是key_name区分大小写")]),s._v(" "),e("li",[s._v("SETNX key value：当key不存在时设置key的值。（SET if Not eXists）")]),s._v(" "),e("li",[s._v("get key_name")]),s._v(" "),e("li",[s._v("GETRANGE key start end：获取key中字符串的子字符串，从start开始，end结束")]),s._v(" "),e("li",[s._v("MGET key1 [key2 …]：获取多个key")]),s._v(" "),e("li",[s._v("GETSET KEY_NAME VALUE：设定key的值，并返回key的旧值。当key不存在，返回nil")]),s._v(" "),e("li",[s._v("STRLEN key：返回key所存储的字符串的长度")]),s._v(" "),e("li",[s._v("INCR KEY_NAME ：INCR命令key中存储的值+1,如果不存在key，则key中的值话先被初始化为0再加1")]),s._v(" "),e("li",[s._v("INCRBY KEY_NAME 增量")]),s._v(" "),e("li",[s._v("DECR KEY_NAME：key中的值自减一")]),s._v(" "),e("li",[s._v("DECRBY KEY_NAME")]),s._v(" "),e("li",[s._v("append key_name value：字符串拼接，追加至末尾，如果不存在，为其赋值")])]),s._v(" "),e("h5",{attrs:{id:"应用场景"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#应用场景"}},[s._v("#")]),s._v(" 应用场景")]),s._v(" "),e("ol",[e("li",[s._v("String通常用于保存单个字符串或JSON字符串数据")]),s._v(" "),e("li",[s._v("因为String是二进制安全的，所以可以把保密要求高的图片文件内容作为字符串来存储")]),s._v(" "),e("li",[s._v("计数器：常规Key-Value缓存应用，如微博数、粉丝数。INCR本身就具有原子性特性，所以不会有线程安全问题")])]),s._v(" "),e("h4",{attrs:{id:"hash"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hash"}},[s._v("#")]),s._v(" Hash")]),s._v(" "),e("p",[s._v("Redis hash是一个string类型的field和value的映射表，"),e("strong",[s._v("hash特别适用于存储对象")]),s._v("。每个hash可以存储232-1键值对。可以看成KEY和VALUE的MAP容器。相比于JSON，hash占用很少的内存空间。")]),s._v(" "),e("h5",{attrs:{id:"常用命令-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常用命令-2"}},[s._v("#")]),s._v(" 常用命令")]),s._v(" "),e("ul",[e("li",[s._v("HSET key_name field value：为指定的key设定field和value")]),s._v(" "),e("li",[s._v("hmset key field value[field1,value1]")]),s._v(" "),e("li",[s._v("hget key field")]),s._v(" "),e("li",[s._v("hmget key field[field1]")]),s._v(" "),e("li",[s._v("hgetall key：返回hash表中所有字段和值")]),s._v(" "),e("li",[s._v("hkeys key：获取hash表所有字段")]),s._v(" "),e("li",[s._v("hlen key：获取hash表中的字段数量")]),s._v(" "),e("li",[s._v("-hdel key field [field1]：删除一个或多个hash表的字段")])]),s._v(" "),e("h5",{attrs:{id:"应用场景-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#应用场景-2"}},[s._v("#")]),s._v(" 应用场景")]),s._v(" "),e("p",[s._v("Hash的应用场景，通常用来存储一个用户信息的对象数据。")]),s._v(" "),e("ol",[e("li",[s._v("相比于存储对象的string类型的json串，json串修改单个属性需要将整个值取出来。而hash不需要。")]),s._v(" "),e("li",[s._v("相比于多个key-value存储对象，hash节省了很多内存空间")]),s._v(" "),e("li",[s._v("如果hash的属性值被删除完，那么hash的key也会被redis删除")])]),s._v(" "),e("h4",{attrs:{id:"list"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#list"}},[s._v("#")]),s._v(" list")]),s._v(" "),e("p",[s._v("类似于Java中的LinkedList")]),s._v(" "),e("p",[s._v("一个key 多个值")]),s._v(" "),e("h5",{attrs:{id:"常用命令-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常用命令-3"}},[s._v("#")]),s._v(" 常用命令")]),s._v(" "),e("ul",[e("li",[s._v("lpush key value1 [value2] 从左侧插入值")]),s._v(" "),e("li",[s._v("rpush key value1 [value2] 从右侧插入值")]),s._v(" "),e("li",[s._v("lpushx key value：从左侧插入值，如果list不存在，则不操作")]),s._v(" "),e("li",[s._v("rpushx key value：从右侧插入值，如果list不存在，则不操作")]),s._v(" "),e("li",[s._v("llen key：获取列表长度")]),s._v(" "),e("li",[s._v("lindex key index：获取指定索引的元素")]),s._v(" "),e("li",[s._v("lrange key start stop：获取列表指定范围的元素  Lrange key 0 -1 表示全部")]),s._v(" "),e("li",[s._v("lpop key ：从左侧移除第一个元素")]),s._v(" "),e("li",[s._v("rpop key：移除列表最后一个元素\nblpop key [key1] timeout：移除并获取列表第一个元素，如果列表没有元素会阻塞列表到等待超时或发现可弹出元素为止")]),s._v(" "),e("li",[s._v("brpop key [key1] timeout：移除并获取列表最后一个元素，如果列表没有元素会阻塞列表到等待超时或发现可弹出元素为止")]),s._v(" "),e("li",[s._v("ltrim key start stop ：对列表进行修改，让列表只保留指定区间的元素，不在指定区间的元素就会被删除")]),s._v(" "),e("li",[s._v("lset key index value ：指定索引的值")]),s._v(" "),e("li",[s._v("linsert key before|after world value：在列表元素前或则后插入元素")])]),s._v(" "),e("h5",{attrs:{id:"应用场景-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#应用场景-3"}},[s._v("#")]),s._v(" 应用场景")]),s._v(" "),e("ol",[e("li",[s._v("对数据大的集合数据删减 \t列表显示、关注列表、粉丝列表、留言评价...分页、热点新闻等")]),s._v(" "),e("li",[s._v("任务队列 \tlist通常用来实现一个消息队列，而且可以确保先后顺序，不必像MySQL那样通过order by来排序")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("补充：\n\nrpop list1 lpush list2 移除list1最后一个元素，并将该元素添加到list2并返回此元素\n用此命令可以实现订单下单流程、用户系统登录注册短信等。\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("h4",{attrs:{id:"set"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#set"}},[s._v("#")]),s._v(" set")]),s._v(" "),e("p",[s._v("唯一、无序")]),s._v(" "),e("h5",{attrs:{id:"常用命令-4"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常用命令-4"}},[s._v("#")]),s._v(" 常用命令")]),s._v(" "),e("ul",[e("li",[s._v("sadd key value1[value2]：向集合添加成员")]),s._v(" "),e("li",[s._v("scard key：返回集合成员数")]),s._v(" "),e("li",[s._v("smembers key：返回集合中所有成员")]),s._v(" "),e("li",[s._v("sismember key member：判断memeber元素是否是集合key成员的成员")]),s._v(" "),e("li",[s._v("srandmember key [count]：返回集合中一个或多个随机数")]),s._v(" "),e("li",[s._v("srem key member1 [member2]：移除集合中一个或多个成员")]),s._v(" "),e("li",[s._v("spop key：移除并返回集合中的一个随机元素")]),s._v(" "),e("li",[s._v("smove source destination member：将member元素从source集合移动到destination集合")]),s._v(" "),e("li",[s._v("sdiff key1 [key2]：返回所有集合的差集")]),s._v(" "),e("li",[s._v("sdiffstore destination key1[key2]：返回给定所有集合的差集并存储在destination中")]),s._v(" "),e("li",[s._v("sinter： 返回交集")]),s._v(" "),e("li",[s._v("sunion： 返回并集")])]),s._v(" "),e("h5",{attrs:{id:"应用场景-4"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#应用场景-4"}},[s._v("#")]),s._v(" 应用场景")]),s._v(" "),e("p",[s._v("对两个集合间的数据[计算]进行交集、并集、差集运算")]),s._v(" "),e("ol",[e("li",[s._v("以非常方便的实现如共同关注、共同喜好、二度好友等功能。对上面的所有集合操作，你还可以使用不同的命令选择将结果返回给客户端还是存储到一个新的集合中。")]),s._v(" "),e("li",[s._v("利用唯一性，可以统计访问网站的所有独立 IP")])]),s._v(" "),e("h4",{attrs:{id:"zset"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#zset"}},[s._v("#")]),s._v(" zset")]),s._v(" "),e("p",[s._v("有序且不重复。每个元素都会关联一个double类型的分数score，Redis通过分数进行从小到大的排序。分数可以重复")]),s._v(" "),e("h5",{attrs:{id:"常用命令-5"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常用命令-5"}},[s._v("#")]),s._v(" 常用命令")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("ZADD key score1 memeber1 score2 member2")])]),s._v(" "),e("li",[e("p",[s._v("ZCARD key ：获取集合中的元素数量")])]),s._v(" "),e("li",[e("p",[s._v("ZCOUNT key min max 计算在有序集合中指定区间分数的成员数")])]),s._v(" "),e("li",[e("p",[s._v("ZRANK key member：返回有序集合指定成员的索引")])]),s._v(" "),e("li",[e("p",[s._v("ZREVRANGE key start stop ：返回有序集中指定区间内的成员，通过索引，分数从高到底")])]),s._v(" "),e("li",[e("p",[s._v("ZRANGEBYSCORE：返回分数内的成员。")]),s._v(" "),e("p",[s._v("例如 ZRANGEBYSCORE z1 （60 （90  返回分数为60>    <90 之间的value")])]),s._v(" "),e("li",[e("p",[s._v("ZREM key member [member …] 移除有序集合中的一个或多个成员")])]),s._v(" "),e("li",[e("p",[s._v("ZREMRANGEBYRANK key start stop 移除有序集合中给定的排名区间的所有成员(第一名是0)(低到高排序）")])]),s._v(" "),e("li",[e("p",[s._v("ZREMRANGEBYSCORE key min max 移除有序集合中给定的分数区间的所有成员")])])]),s._v(" "),e("h5",{attrs:{id:"应用场景-5"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#应用场景-5"}},[s._v("#")]),s._v(" 应用场景")]),s._v(" "),e("p",[s._v("常用于排行榜：")]),s._v(" "),e("ol",[e("li",[s._v("如推特可以以发表时间作为score来存储")]),s._v(" "),e("li",[s._v("存储成绩")]),s._v(" "),e("li",[s._v("还可以用zset来做带权重的队列，让重要的任务先执行")])]),s._v(" "),e("h2",{attrs:{id:"jedis"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jedis"}},[s._v("#")]),s._v(" Jedis")]),s._v(" "),e("ol",[e("li",[e("p",[s._v("连接redis")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('@Test\npublic void test(){\n\tJedis jedis = new Jedis("host",port);\n\tjedis.auth("password");\n\t// 操作redis\n\tSystem.out.println(jedis.ping());\n\tjedis.close();\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])])]),s._v(" "),e("li",[e("p",[s._v("JedisPool")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// 创建config\nJedisPoolConfig config = new JedisPoolConfig();\ncon.setMaxTotal(5);// 最大连接数\n...\n// 创建连接池\nJedisPool pool = new JedisPool(config,host,port);\nJedis jedis = pool.getResource();\njedis.auth();\n\njedis.close();\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br")])])]),s._v(" "),e("li",[e("p",[s._v("Spring-data")]),s._v(" "),e("p",[s._v("导入jar包")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("<dependency>\n    <groupId>redis.clients</groupId>\n    <artifactId>jedis</artifactId>\n    <version>2.4.2</version>\n</dependency>\n\n<dependency>\n    <groupId>org.springframework.data</groupId>\n    <artifactId>spring-data-redis</artifactId>\n    <version>2.2.4.RELEASE</version>\n</dependency>\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br")])])]),s._v(" "),e("li",[e("p",[s._v("spring-boot-redis")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("<dependency>\n       <groupId>org.springframework.boot</groupId>\n       <artifactId>spring-boot-starter-data-redis</artifactId>\n</dependency>   \x3c!--        redis--\x3e\n\n\t@Autowired\n    private StringRedisTemplate redisTemplate;\n    \n    redisTemplate.opsForValue().get\n    \n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br")])])])]),s._v(" "),e("h2",{attrs:{id:"redis功能特性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#redis功能特性"}},[s._v("#")]),s._v(" Redis功能特性")]),s._v(" "),e("h3",{attrs:{id:"发布订阅"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#发布订阅"}},[s._v("#")]),s._v(" 发布订阅")]),s._v(" "),e("p",[s._v("Redis 发布订阅(pub/sub)是一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息。")]),s._v(" "),e("p",[s._v("Redis 客户端可以订阅任意数量的频道。")]),s._v(" "),e("p",[s._v("下图展示了频道 channel1 ， 以及订阅这个频道的三个客户端 —— client2 、 client5 和 client1 之间的关系：\n"),e("img",{attrs:{src:"C:%5CUsers%5CRXT-2020%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200207055314891.png",alt:"image-20200207055314891"}})]),s._v(" "),e("p",[s._v("当有新消息通过 PUBLISH 命令发送给频道 channel1 时， 这个消息就会被发送给订阅它的三个客户端："),e("img",{attrs:{src:"C:%5CUsers%5CRXT-2020%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200207055328272.png",alt:"image-20200207055328272"}})]),s._v(" "),e("p",[e("strong",[s._v("命令")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("·subscribe channel [channel…]：订阅一个或多个频道的信息\n\n·psubscribe pattern [pattern…]：订阅一个或多个符合规定模式的频道\n\n·publish channel message ：将信息发送到指定频道\n\n·unsubscribe [channel[channel…]]：退订频道\n\n·punsubscribe [pattern[pattern…]]：退订所有给定模式的频道\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br")])]),e("p",[e("strong",[s._v("应用场景")])]),s._v(" "),e("p",[s._v("构建实时的消息系统，比如普通聊天、群聊等功能。")]),s._v(" "),e("p",[s._v("1、博客网站订阅，当作者发布就可以推送给粉丝")]),s._v(" "),e("p",[s._v("2、微信公众号模式")]),s._v(" "),e("h2",{attrs:{id:"redis多数据库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#redis多数据库"}},[s._v("#")]),s._v(" Redis多数据库")]),s._v(" "),e("p",[s._v("Redis事务可以一次执行多个命令，（按顺序地串行化执行，执行过程中不允许其他命令插入执行序列中）。\n1、Redis会将一个事务中的所有命令序列化，然后按顺序执行\n2、执行中不会被其他命令插入，不允许加塞行为")]),s._v(" "),e("table",[e("thead",[e("tr",[e("th",[s._v("命令")]),s._v(" "),e("th",[s._v("描述")])])]),s._v(" "),e("tbody",[e("tr",[e("td",[s._v("DISCARD")]),s._v(" "),e("td",[s._v("取消事务，放弃执行事务块内的所有命令")])]),s._v(" "),e("tr",[e("td",[s._v("EXEC")]),s._v(" "),e("td",[s._v("执行所有事务块内的命令")])]),s._v(" "),e("tr",[e("td",[s._v("MULTI")]),s._v(" "),e("td",[s._v("标记一个事务块的开始")])]),s._v(" "),e("tr",[e("td",[s._v("UNWATCH")]),s._v(" "),e("td",[s._v("取消watch命令对所有key的监视")])]),s._v(" "),e("tr",[e("td",[s._v("WATCH")]),s._v(" "),e("td",[s._v("监视一个或者多个key，如果事务执行之前这些key被其他命令改动，则事务被打断")])])])]),s._v(" "),e("h2",{attrs:{id:"redis持久化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#redis持久化"}},[s._v("#")]),s._v(" Redis持久化")]),s._v(" "),e("h3",{attrs:{id:"rdb"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rdb"}},[s._v("#")]),s._v(" RDB")]),s._v(" "),e("p",[s._v("RDB是Redis默认持久化机制。RDB相当于快照，保存的是一种状态")]),s._v(" "),e("p",[s._v("优点：\n保存速度、还原速度极快\n适用于灾难备份\n缺点：\n小内存的机器不符合使用。RDB机制符合要求就会快照。")]),s._v(" "),e("h3",{attrs:{id:"aof"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#aof"}},[s._v("#")]),s._v(" AOF")]),s._v(" "),e("p",[s._v("如果Redis意外down掉，RDB方式会丢失最后一次快照后的所有修改。如果要求应用不能丢失任何修改，可以采用AOF持久化方式。")]),s._v(" "),e("p",[s._v("AOF：Append-Only File：Redis会将没一个收到写命令都追加到文件中（默认是appendonly.aof）。当Redis重启时会通过重新执行文件中的写命令重建整个数据库的内容。")]),s._v(" "),e("p",[s._v("产生的问题：\n有些命令是多余的，占磁盘空间。")]),s._v(" "),e("h3",{attrs:{id:"rdb详解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rdb详解"}},[s._v("#")]),s._v(" RDB详解")]),s._v(" "),e("h4",{attrs:{id:"_1-是什么？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-是什么？"}},[s._v("#")]),s._v(" 1.是什么？")]),s._v(" "),e("p",[s._v("原理是redis会单独创建（fork）一个一模一样的子进程，")]),s._v(" "),e("p",[s._v("会先将数据写入一个临时文件中，待持久化结束了，")]),s._v(" "),e("p",[s._v("再用这个临时文件替换了上次持久化的文件，")]),s._v(" "),e("p",[s._v("主进程不会进行任何IO操作，这就确保了性能")]),s._v(" "),e("h5",{attrs:{id:"配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置"}},[s._v("#")]),s._v(" 配置")]),s._v(" "),e("p",[s._v("redis.conf下")]),s._v(" "),e("p",[s._v("dir ./         保存持久化文件的目录")]),s._v(" "),e("p",[s._v("dbfilename dumo.rdb 持久化文件的名字")]),s._v(" "),e("h4",{attrs:{id:"_2-他什么时候fork子进程，或者什么时候出发rdb持久化机制？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-他什么时候fork子进程，或者什么时候出发rdb持久化机制？"}},[s._v("#")]),s._v(" 2.他什么时候fork子进程，或者什么时候出发rdb持久化机制？")]),s._v(" "),e("p",[s._v("shutdown时，如果没有开启aof,会触发")]),s._v(" "),e("p",[s._v("配置文件中的：")]),s._v(" "),e("p",[s._v("​\tsava 900 1")]),s._v(" "),e("p",[s._v("​\tsava 300 100")]),s._v(" "),e("p",[s._v("​\tsava 60 10000")]),s._v(" "),e("p",[s._v("​\tsava 下 900秒有1次改变，就会触发rdb，其他sava同理")]),s._v(" "),e("p",[s._v("执行命令sava或者bgsava时：")]),s._v(" "),e("p",[s._v("​\tsava是只管保存，其他不管，全部阻塞。")]),s._v(" "),e("p",[s._v("​\tbgsava，即background不会阻塞，会fork子进程，在后台进行持久化")]),s._v(" "),e("p",[s._v("执行flushall命令 但是里面是空的，没有意义")]),s._v(" "),e("h3",{attrs:{id:"aof详解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#aof详解"}},[s._v("#")]),s._v(" AOF详解")]),s._v(" "),e("h4",{attrs:{id:"如何开启aof？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何开启aof？"}},[s._v("#")]),s._v(" 如何开启aof？")]),s._v(" "),e("p",[s._v("redis.conf 下")]),s._v(" "),e("p",[s._v("appendonly yes")]),s._v(" "),e("p",[s._v("appendfilename “appendonly.aof”")]),s._v(" "),e("h4",{attrs:{id:"_1-aof-是什么？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-aof-是什么？"}},[s._v("#")]),s._v(" 1.aof 是什么？")]),s._v(" "),e("p",[s._v("ls -I --block-size=M")]),s._v(" "),e("p",[s._v("原理是将Redis的操作日志以追加的方式写入文件，读记录不记录")]),s._v(" "),e("h4",{attrs:{id:"_2-aof持久化的触发机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-aof持久化的触发机制"}},[s._v("#")]),s._v(" 2.aof持久化的触发机制")]),s._v(" "),e("p",[s._v("指定更新日志的条件")]),s._v(" "),e("p",[s._v("redis.conf 下")]),s._v(" "),e("p",[s._v("​\tappendfsync :everysec 每秒同步一次 （默认）")]),s._v(" "),e("p",[s._v("​    appendfsync :no  缓冲区满了，操作系统调用，持久化没保证")]),s._v(" "),e("p",[s._v("​\tappendfsync :always  同步持久化，每次发生数据变更时，立即记录到磁盘，")]),s._v(" "),e("h4",{attrs:{id:"_3-aof重写机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-aof重写机制"}},[s._v("#")]),s._v(" 3.aof重写机制")]),s._v(" "),e("p",[s._v("aof重写会fork子进程")]),s._v(" "),e("p",[s._v("什么时候回触发aof重写:")]),s._v(" "),e("p",[s._v("redis.conf")]),s._v(" "),e("p",[s._v("​\tauto-aof-rewite-percentage 100")]),s._v(" "),e("p",[s._v("#当AOF文件增长到一定大小的时候 会调用BGREWRITEAOF 。当AOF文件的增长率大于该配置的时候自动开启重写")]),s._v(" "),e("p",[s._v("​\tauto-aof-rewrite-min-size 64M")]),s._v(" "),e("p",[s._v("#当aof文件增长到64M的时候会调用BGREWRITEAOF 对日志文件进行重写")]),s._v(" "),e("h4",{attrs:{id:"_4-redis4-0后混合持久化机制-rdb-aof"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-redis4-0后混合持久化机制-rdb-aof"}},[s._v("#")]),s._v(" 4.redis4.0后混合持久化机制(rdb+aof)")]),s._v(" "),e("p",[s._v("对aof重写的升级")]),s._v(" "),e("h5",{attrs:{id:"开启混合持久化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#开启混合持久化"}},[s._v("#")]),s._v(" 开启混合持久化")]),s._v(" "),e("p",[s._v("aof-use-rdb-preamble yes")]),s._v(" "),e("p",[s._v("#混合持久化的开启与关闭")])])}),[],!1,null,null,null);a.default=r.exports}}]);