(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{352:function(a,s,t){"use strict";t.r(s);var v=t(3),r=Object(v.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"jvm"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jvm"}},[a._v("#")]),a._v(" JVM")]),a._v(" "),t("h2",{attrs:{id:"java运行程序图"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java运行程序图"}},[a._v("#")]),a._v(" java运行程序图")]),a._v(" "),t("p",[t("img",{attrs:{src:"C:%5CUsers%5CRXT-2020%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200209170828841.png",alt:"image-20200209170828841"}})]),a._v(" "),t("p",[t("img",{attrs:{src:"C:%5CUsers%5CRXT-2020%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200209173326838.png",alt:"image-20200209173326838"}})]),a._v(" "),t("h2",{attrs:{id:"java类加载器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java类加载器"}},[a._v("#")]),a._v(" java类加载器")]),a._v(" "),t("p",[a._v("通过一个类的全限定名来获取描述此类的二进制字节流")]),a._v(" "),t("h3",{attrs:{id:"appclassloader"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#appclassloader"}},[a._v("#")]),a._v(" AppClassLoader")]),a._v(" "),t("p",[a._v("加载classpath中的class类，通过在JVM启动命令中的**-classpath**参数指定路径，可以指定绝对路径、相对路径、环境变量等，举例：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("java –classpath %CLASSPATH%\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("h3",{attrs:{id:"extentionclassloader"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#extentionclassloader"}},[a._v("#")]),a._v(" ExtentionClassLoader")]),a._v(" "),t("p",[a._v("扩展类加载器，加载环境变量%JRE_HOME%\\lib\\ext目录下的class文件")]),a._v(" "),t("p",[a._v("这个加载器也可以在JVM启动时使用参数改变加载的行为，参数是-D java.ext.dirs=，作用是替换Java扩展类加载器所加载的文件目录。")]),a._v(" "),t("p",[a._v("注意，该参数是替换而不是追加，因为这个加载器的加载路径只有一个，也就是说，%JRE_HOME%\\lib\\ext是扩展类加载器的默认路径，如果我们在启动时使用-Djava.ext.dirs=d:/test，那么java就不再加载%JRE_HOME%\\lib\\ext路径下的文件。")]),a._v(" "),t("h3",{attrs:{id:"bootstrapclassloader"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bootstrapclassloader"}},[a._v("#")]),a._v(" BootstrapClassLoader")]),a._v(" "),t("p",[a._v("用于加载JAVA核心类库，也就是环境变量的**%JRE_HOME%\\lib**下的rt.jar、resources.jar、charsets.jar等。")]),a._v(" "),t("p",[a._v("在JVM启动时加入**-Xbootclasspath**参数，可以把对应路径也加载到Bootstrap的路径列表中来，这个参数有两种用法：")]),a._v(" "),t("p",[a._v("1)，"),t("strong",[a._v("-Xbootclasspath/a:{人工指定路径}")]),a._v("，把对应路径加载到Bootstrap默认路径后面，也就是说，如果有class重复，以Bootstrap默认路径下的类为准（因为是按照路径列表顺序加载的），举例：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("java -Xbootclasspath/a:D:\\test\\Test.jar \n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("2)，"),t("strong",[a._v("-Xbootclasspath/p: {人工指定路径}")]),a._v("，把对应路径加载到Bootstrap默认路径后面，也就是说，如果有class重复，以指定路径下的类为准，举例：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("java -Xbootclasspath/p:D:\\test\\Test.jar \n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("h3",{attrs:{id:"各种加载器之间的关系"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#各种加载器之间的关系"}},[a._v("#")]),a._v(" 各种加载器之间的关系")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("1，BootstrapClassLoader是Extention ClassLoader的父加载器。\n\n2，ExtentionClassLoader是AppclassLoader的父加载器。\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br")])]),t("h3",{attrs:{id:"加载器的加载顺序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#加载器的加载顺序"}},[a._v("#")]),a._v(" 加载器的加载顺序")]),a._v(" "),t("p",[a._v("加载器在JVM启动时的加载顺序是：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("1，BootstrapClassLoader\n\n2，ExtentionClassLoader\n\n3，AppclassLoader\n\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br")])]),t("h3",{attrs:{id:"双亲委派机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#双亲委派机制"}},[a._v("#")]),a._v(" 双亲委派机制")]),a._v(" "),t("ol",[t("li",[a._v("类加载器收到类加载的请求")]),a._v(" "),t("li",[a._v("将这个请求向上委托给父类加载器去完成，一直向上委托，直到启动类加载器。")]),a._v(" "),t("li",[a._v("启动加载器检测是否能够加载当前这个类，能加载就结束，使用当前的加载器，否则抛出异常，通知子加载器进行加载。")]),a._v(" "),t("li",[a._v("重复步骤3")])]),a._v(" "),t("h3",{attrs:{id:"沙箱安全机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#沙箱安全机制"}},[a._v("#")]),a._v(" 沙箱安全机制")]),a._v(" "),t("h2",{attrs:{id:"native-关键字"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#native-关键字"}},[a._v("#")]),a._v(" Native 关键字")]),a._v(" "),t("p",[a._v("凡是呆了native关键字的，说明java的作用范围达不到了，回去调用c语言的库")]),a._v(" "),t("p",[a._v("native方法会进入本地方法栈，调用方法本地接口(JNI)。")]),a._v(" "),t("p",[a._v("JNI作用:扩展Java的使用，融合不同的编程语言为Java所用。")]),a._v(" "),t("h2",{attrs:{id:"pc寄存器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#pc寄存器"}},[a._v("#")]),a._v(" PC寄存器")]),a._v(" "),t("p",[a._v("程序计数器: Program Counter Register")]),a._v(" "),t("p",[a._v("​\t每个线程都有一个程序计数器，是线程私有的，就是一个指针，只想方法区中的方法字节码（用来存储向像一条指令的地址，也即将要执行的指令代码），在执行引擎读取下一条指令，是一个非常小的内存空间，几乎可以忽略不计。")]),a._v(" "),t("h2",{attrs:{id:"方法区"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法区"}},[a._v("#")]),a._v(" 方法区")]),a._v(" "),t("p",[a._v("Method Area 方法区")]),a._v(" "),t("p",[a._v("​\t方法区是被所有线程共享的，所有字段和方法字节码，以及一些特殊用法，如构造函数，接口代码也在此定义，简单说，所有定义的方法的信息都保存在该区域，此区域属于共享区间。")]),a._v(" "),t("p",[a._v("​\t静态变量、常量、类信息(构造方法、接口定义)、运行时常量池存在方法区中、但是实例变量存在堆内存中和方法区无关。")]),a._v(" "),t("p",[a._v("​\tstatic、final、Class")]),a._v(" "),t("h2",{attrs:{id:"栈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#栈"}},[a._v("#")]),a._v(" 栈")]),a._v(" "),t("p",[a._v("栈 ：数据结构，线程级别的。一个线程有一个栈")]),a._v(" "),t("p",[a._v("先进后出、后进先出")]),a._v(" "),t("p",[a._v("栈帧")]),a._v(" "),t("h2",{attrs:{id:"三种jvm"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三种jvm"}},[a._v("#")]),a._v(" 三种JVM")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("Sun公司 HotSpot "),t("code",[a._v("Java HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode)")])])]),a._v(" "),t("li",[t("p",[a._v("BEA    JRokit")])]),a._v(" "),t("li",[t("p",[a._v("IBM    J9  VM")])])]),a._v(" "),t("p",[a._v("我们学习的是HotSpot 为中心的JVM")]),a._v(" "),t("h2",{attrs:{id:"堆"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#堆"}},[a._v("#")]),a._v(" 堆")]),a._v(" "),t("p",[a._v("Heap，一个JVM 只有一个堆，堆内存的大小是可以调节的。")]),a._v(" "),t("p",[a._v("类加载器读取了类文件后，一般把 类的实例、类的方法、类中的常量、变量以及保存所有引用类型的真实对象。")]),a._v(" "),t("p",[a._v("堆内存中还要细分为三个区域：")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("新生区(伊甸园)（年轻代）  New/Young")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("伊甸园  （Eden Space）")])]),a._v(" "),t("li",[t("p",[a._v("幸存区0区 （Survivor 0 space）")])]),a._v(" "),t("li",[t("p",[a._v("幸存区1区 （Survivor 1 space）")])])])]),a._v(" "),t("li",[t("p",[a._v("老年区（老年代）old")])]),a._v(" "),t("li",[t("p",[a._v("永久存储区（元空间） perm Gen/MetaSpace")])])]),a._v(" "),t("p",[a._v("GC垃圾回收，主要是在伊甸园区和养老区")]),a._v(" "),t("p",[a._v("如果内存满了 就会报 OOM（OutOfMemoryError）,堆内存不足")]),a._v(" "),t("p",[a._v("jdk之后，永久存储区改名为元空间。")]),a._v(" "),t("h3",{attrs:{id:"新生区"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#新生区"}},[a._v("#")]),a._v(" 新生区")]),a._v(" "),t("ul",[t("li",[a._v("类：诞生和成长的地方，甚至是死亡")]),a._v(" "),t("li",[a._v("伊甸园，所有的对象都是在伊甸园区内new出来的")]),a._v(" "),t("li",[a._v("幸存区（0,1）")])]),a._v(" "),t("p",[a._v("当伊甸园的空间用完时，程序又需要创建对象，JVM的轻GC垃圾回收器将对伊甸园区进行垃圾回收，将伊甸园区中的不再被其他对象所引用的对象进行销毁。然后将伊甸园中的剩余对象移动到幸存0区。若幸存0区也满了，再对该区进行轻GC垃圾回收，然后移动到1区。那如果1区也满了呢？再移动到养老区。")]),a._v(" "),t("h3",{attrs:{id:"永久区"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#永久区"}},[a._v("#")]),a._v(" 永久区")]),a._v(" "),t("p",[a._v("MetaSpace代替Perm Gen")]),a._v(" "),t("p",[a._v("这个区域常驻内存。用来存放JDK自身携带的Class对象。Interface元数据，存储的是Java运行时的一些环境或类信息，这个区域不存在垃圾回收！关闭VM虚拟就会释放这个区域的内存。")]),a._v(" "),t("p",[a._v("一个启动类，加载了太多的第三方jar包。Tomcat部署了太多的应用，大量动态生成的反射类，不断的被加载。直到内存满了，就会出现OOM。")]),a._v(" "),t("ul",[t("li",[a._v("jdk1.6 之前：永久代，常量池是在方法区")]),a._v(" "),t("li",[a._v("jdk1.7 ：永久代，但是慢慢退化了，去永久代，常量池在堆中。")]),a._v(" "),t("li",[a._v("jdk1.8 ：无永久代，常量池在元空间")])]),a._v(" "),t("p",[t("img",{attrs:{src:"C:%5CUsers%5CRXT-2020%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200210000727783.png",alt:"image-20200210000727783"}})]),a._v(" "),t("p",[a._v("OOM怎么解决。扩大堆内存")]),a._v(" "),t("p",[t("img",{attrs:{src:"C:%5CUsers%5CRXT-2020%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200210013451001.png",alt:"image-20200210013451001"}})]),a._v(" "),t("h4",{attrs:{id:"命令详解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#命令详解"}},[a._v("#")]),a._v(" 命令详解")]),a._v(" "),t("ul",[t("li",[a._v("-Xms：设置初始化内存分配大小 例如-Xms3350m")]),a._v(" "),t("li",[a._v("-Xmx：设置最大分配内存，如果程序运行超出则会OOM")]),a._v(" "),t("li",[a._v("-Xss：是指设定每个线程的堆栈大小。")]),a._v(" "),t("li",[a._v("-Xmn：-Xmn2g 设置年轻代的大小为2g。"),t("strong",[a._v("整个堆大小=年轻代大小 + 年老代大小 + 持久代大小")]),a._v("。持久代一般固定大小为64m，所以增大年轻代后，将会减小年老代大小。此值对系统性能影响较大，Sun官方推荐配置为整个堆的3/8。")]),a._v(" "),t("li",[a._v("-XX:NewRatio=4 设置年轻代与年老代的比值（不包括永久区）。即年轻代占堆栈的1/5，年老代占堆栈的4/5.")]),a._v(" "),t("li",[a._v("-XX:SuvivorRatio=4 设置幸存区与伊甸园区的比值。两个幸存区：伊甸园区=2:4 即一个幸存区占年轻代的1/6")]),a._v(" "),t("li",[a._v("-XX:MaxPermSize=16m 设置持久代的大小为16m.")]),a._v(" "),t("li",[a._v("-XX:MaxTenuringThreshold=0 设置垃圾最大年龄。如果设置为0，年轻代不经过Suvivor区，直接进入年老代。对于年老代比较多的应用，可以提高效率。"),t("strong",[a._v("如果将此值设置为一个较大值，则年轻代对象会在Survivor区进行多次复制，这样可以增加对象再年轻代的存活时间")]),a._v("，增加在年轻代即被回收的概论。")]),a._v(" "),t("li",[a._v("-XX:PretenureSizeThreshold=3145728 这个参数来定义多大的对象直接进入老年代")]),a._v(" "),t("li",[a._v("-XX:+ DisableExplicitGC来禁止RMI（Java远程方法调用）调用System.gc")]),a._v(" "),t("li",[a._v("-XX:+PrintGCDetails   打印GC垃圾回收的信息")]),a._v(" "),t("li",[a._v("-XX:+DumpOnOutOfMemoryError  //oom DUMP 需要配合JroFile 插件")])]),a._v(" "),t("h2",{attrs:{id:"gc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gc"}},[a._v("#")]),a._v(" GC")]),a._v(" "),t("p",[a._v("Minor GC：新生代GC，指发生在新生代的垃圾收集动作，所有的Minor GC都会触发全世界的暂停（stop-the-world），停止应用程序的线程，不过这个过程非常短暂。")]),a._v(" "),t("p",[a._v("Major GC/Full GC：老年代GC，指发生在老年代的GC。")]),a._v(" "),t("p",[a._v("jvm 在进行GC时并不是对这三个区域统一回收。大部分时候回收都是年轻代即新生代")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("新生代")])]),a._v(" "),t("li",[t("p",[a._v("幸存区（from，to）")])]),a._v(" "),t("li",[t("p",[a._v("老年代")]),a._v(" "),t("p",[a._v("GC两种类：Minor GC ， Full GC")])])]),a._v(" "),t("h3",{attrs:{id:"gc的触发条件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gc的触发条件"}},[a._v("#")]),a._v(" GC的触发条件")]),a._v(" "),t("p",[a._v("充分了解了jvm的内存结构之后，下面我们就来说说什么情况下会触发gc。触发full gc的情况主要有这几种：")]),a._v(" "),t("p",[a._v("（1）System.gc()方法的调用。此方法的调用是建议JVM进行Full GC,虽然只是建议而非一定，但很多情况下它会触发 Full GC,从而增加Full GC的频率，也即增加了间歇性停顿的次数。强烈影响系建议能不使用此方法就别使用，让虚拟机自己去管理它的内存，可通过通过-XX:+ DisableExplicitGC来禁止RMI（Java远程方法调用）调用System.gc。")]),a._v(" "),t("p",[a._v("（2）旧生代空间不足。旧生代空间只有在新生代对象转入及创建为大对象、大数组时才会出现不足的现象，当执行Full GC后空间仍然不足，则抛出错误：java.lang.OutOfMemoryError: Java heap space 。为避免以上两种状况引起的FullGC，调优时应尽量做到让对象在Minor GC阶段被回收、让对象在新生代多存活一段时间及不要创建过大的对象及数组。")]),a._v(" "),t("p",[a._v("（3）Permanet Generation空间满了。Permanet Generation中存放的为一些class的信息等，当系统中要加载的类、反射的类和调用的方法较多时，Permanet Generation可能会被占满，在未配置为采用CMS GC的情况下会执行Full GC。如果经过Full GC仍然回收不了，那么JVM会抛出错误信息：java.lang.OutOfMemoryError: PermGen space 。为避免Perm Gen占满造成Full GC现象，可采用的方法为增大Perm Gen空间或转为使用CMS GC。")]),a._v(" "),t("p",[a._v("（4）通过Minor GC后进入老年代的平均大小大于老年代的可用内存。如果发现统计数据说之前Minor GC的平均晋升大小比目前old gen剩余的空间大，则不会触发Minor GC而是转为触发full GC。")]),a._v(" "),t("p",[a._v("（5）由Eden区、From Space区向To Space区复制时，对象大小大于To Space可用内存，则把该对象转存到老年代，且老年代的可用内存小于该对象大小")]),a._v(" "),t("h3",{attrs:{id:"gc回收的内容"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gc回收的内容"}},[a._v("#")]),a._v(" GC回收的内容")]),a._v(" "),t("p",[a._v("知道了gc触发的条件之后，我们就能知道gc主要回收什么了？gc的主要作用是回收堆中的对象。通过可达性分析一个对象的引用是否存在，如果不存在，就可以被回收了。")]),a._v(" "),t("h3",{attrs:{id:"gc的算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gc的算法"}},[a._v("#")]),a._v(" GC的算法")]),a._v(" "),t("ul",[t("li",[a._v("标记清除法")]),a._v(" "),t("li",[a._v("标记整理(Mark-Compact)算法")]),a._v(" "),t("li",[a._v("复制算法")]),a._v(" "),t("li",[a._v("引用计数器")])]),a._v(" "),t("h4",{attrs:{id:"引用计数器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#引用计数器"}},[a._v("#")]),a._v(" 引用计数器")]),a._v(" "),t("p",[t("img",{attrs:{src:"C:%5CUsers%5CRXT-2020%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200210033657903.png",alt:"image-20200210033657903"}})]),a._v(" "),t("h4",{attrs:{id:"复制算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#复制算法"}},[a._v("#")]),a._v(" 复制算法")]),a._v(" "),t("p",[a._v("主要用于新生代")]),a._v(" "),t("p",[a._v("survivor中，to区是空的那个。如果to区和from区都不为空，会把其中一个区的东西复制到另一个区中。")]),a._v(" "),t("p",[t("img",{attrs:{src:"C:%5CUsers%5CRXT-2020%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200210034947706.png",alt:"image-20200210034947706"}})]),a._v(" "),t("ul",[t("li",[a._v("优点：没有内存的碎片。")]),a._v(" "),t("li",[a._v("缺点：浪费了内存空间。")])]),a._v(" "),t("p",[a._v("复制算法最佳使用场景：对象存活度较低")]),a._v(" "),t("h4",{attrs:{id:"标记清除法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#标记清除法"}},[a._v("#")]),a._v(" 标记清除法")]),a._v(" "),t("p",[t("img",{attrs:{src:"C:%5CUsers%5CRXT-2020%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200210035513851.png",alt:"image-20200210035513851"}})]),a._v(" "),t("ul",[t("li",[a._v("优点：不需要额外的空间")]),a._v(" "),t("li",[a._v("缺点：两次扫描。浪费严重，会产生内存碎片，")])]),a._v(" "),t("h4",{attrs:{id:"标记-整理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#标记-整理"}},[a._v("#")]),a._v(" 标记-整理")]),a._v(" "),t("p",[t("img",{attrs:{src:"C:%5CUsers%5CRXT-2020%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200210035741106.png",alt:"image-20200210035741106"}})]),a._v(" "),t("p",[t("img",{attrs:{src:"C:%5CUsers%5CRXT-2020%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200210040018630.png",alt:"image-20200210040018630"}})]),a._v(" "),t("p",[a._v("年轻代：")]),a._v(" "),t("ul",[t("li",[a._v("存活率低")]),a._v(" "),t("li",[a._v("使用复制算法")])]),a._v(" "),t("p",[a._v("老年代：")]),a._v(" "),t("ul",[t("li",[a._v("区域大：存活率高")]),a._v(" "),t("li",[a._v("标记清除 + 标记压缩混合实现")])]),a._v(" "),t("h2",{attrs:{id:"jmm"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jmm"}},[a._v("#")]),a._v(" JMM")]),a._v(" "),t("h3",{attrs:{id:"_1-什么是jmm"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是jmm"}},[a._v("#")]),a._v(" 1.什么是JMM")]),a._v(" "),t("p",[a._v("Java Memory Model")]),a._v(" "),t("p",[a._v("java 内存 模型")]),a._v(" "),t("h3",{attrs:{id:"_2-jmm的作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-jmm的作用"}},[a._v("#")]),a._v(" 2.JMM的作用")]),a._v(" "),t("p",[a._v("缓存一致性协议，用于定义数据读写的规则")]),a._v(" "),t("p",[a._v("JMM定义了线程工作内存和主内存之间的抽象关系：线程之间的共享变量存储在主内存（Main Memory）中，每个线程都有一个私有的本地内存（Local Memory）")]),a._v(" "),t("p",[t("img",{attrs:{src:"C:%5CUsers%5CRXT-2020%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200210041848133.png",alt:"image-20200210041848133"}})]),a._v(" "),t("p",[a._v("解决共享对象可见性这个问题： volatile")]),a._v(" "),t("h3",{attrs:{id:"_3-它如何学习？"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-它如何学习？"}},[a._v("#")]),a._v(" 3.它如何学习？")]),a._v(" "),t("p",[a._v("JMM：抽象的概念，理论")]),a._v(" "),t("p",[a._v("JMM对这八种指令的使用，制定了如下规则：")]),a._v(" "),t("ul",[t("li",[a._v("不允许read和load、store和write操作之一单独出现，即不允许一个变量从主内存读取了但工作内存")]),a._v(" "),t("li",[a._v("不接受，或者从工作内存发起回写了但主内存不接受的情况出现。")]),a._v(" "),t("li",[a._v("不允许线程丢弃它最近的assign操作，即工作变量的数据改变了之后，必须告知主存。")]),a._v(" "),t("li",[a._v("不允许一个线程将没有assign的数据从工作内存同步回主内存。")]),a._v(" "),t("li",[a._v('一个新的变量必须在主内存中"诞生"，不允许工作内存直接使用一个未被初始化(assign或load)的变量。')]),a._v(" "),t("li",[a._v("一个变量同一时间只有一个线程能对其进行lock。多次lock后，必须执行相同次数的unlock才能解锁。")]),a._v(" "),t("li",[a._v("如果对一个变量进行lock操作，会清空所有工作内存中此变量的值，在执行引擎使用这个变量前，必须重新load或assign操作初始化变量的值。")]),a._v(" "),t("li",[a._v("如果一个变量没有被lock，就不能对其进行unlock操作。也不能unlock一个被其他线程锁住的变量。")]),a._v(" "),t("li",[a._v("对一个变量进行unlock操作之前，必须把此变量同步回主内存（执行store和write操作）。")])]),a._v(" "),t("p",[a._v("MM对这八种操作规则和对"),t("a",{attrs:{href:"https://www.cnblogs.com/null-qige/p/8569131.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("volatile的一些特殊规则"),t("OutboundLink")],1),a._v("就能确定哪些操作是线程安全，哪些操作是线程不安全的了。但是这些规则实在复杂，很难在实践中直接分析。所以一般我们也不会通过上述规则进行分析。更多的时候，使用java的happen-before规则来进行分析")]),a._v(" "),t("p",[a._v("volatile：")])])}),[],!1,null,null,null);s.default=r.exports}}]);